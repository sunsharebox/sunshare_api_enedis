{"version":3,"sources":["../src/user.js"],"names":["getUserAccessToken","id","then","user","expiredAt","Date","console","log","accessToken","Error","getUserFromEnedis","usagePointId","url","options","headers","Accept","Authorization","axios","get","res","data","customer","getUserContactDataFromEnedis","getUserContractsFromEnedis","getUserAddressesFromEnedis","formatAddress","street","address","postal_code","city","country","getMyData","req","contactData","identity","contracts","addresses","Promise","all","length","firstname","natural_person","lastname","phone","contact_data","email","usage_points","map","up","usage_point","usage_point_addresses","send","catch","err","deleteMyData","userId","deleteDataForUser"],"mappings":"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","file":"user.js","sourcesContent":["import axios from 'axios';\nimport { getUserByEnedisId, findOrCreateUser } from '../db/user';\nimport { deleteDataForUser } from '../db/data';\n\n/**\n * get user's accestoken\n *\n * if the token is expired, get a new one through enedis.\n * @param {number} id enedis user id\n */\nexport const getUserAccessToken = id => {\n  return getUserByEnedisId(id).then(user => {\n    if (user) {\n      if (user.expiredAt < new Date()) {\n        // TODO get new accessToken\n      }\n      console.log('user accessToken : ', user.accessToken);\n      return user.accessToken;\n    }\n    throw new Error('User not found');\n  });\n};\n\n/**\n * get user information from enedis\n *\n * @param {string} accessToken\n * @param {number} usagePointId\n */\nexport const getUserFromEnedis = (accessToken, usagePointId) => {\n  const url = `https://gw.hml.api.enedis.fr/v3/customers/identity?usage_point_id=${usagePointId}`;\n  const options = {\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n  };\n  // data is in the form of [{\"customer\": { \"customer_id\": \"3000000\", \"identity\": {\"natural_person\": {title, firstname, lastname} } } } ]\n  return axios.get(url, options).then(res => res.data[0].customer);\n};\n\n/**\n * get user's contact data from enedis\n *\n * @param {string} accessToken\n * @param {number} usagePointId\n */\nexport const getUserContactDataFromEnedis = (accessToken, usagePointId) => {\n  const url = `https://gw.hml.api.enedis.fr/v3/customers/contact_data?usage_point_id=${usagePointId}`;\n  const options = {\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n  };\n  /* data is in the form of \n  {\n    \"customer_id\": \"1358019319\",\n      \"contact\": {\n      \"phone\": \"0245323491\",\n      \"email\": \"sandra.thi@wanadoo.fr\"\n    }\n  }\n  */\n  return axios.get(url, options).then(res => res.data[0].customer);\n};\n\n/**\n * get user's contract data from enedis\n *\n * @param {string} accessToken\n * @param {number} usagePointId\n */\nexport const getUserContractsFromEnedis = (accessToken, usagePointId) => {\n  const url = `https://gw.hml.api.enedis.fr/v3/customers/usage_points/contracts?usage_point_id=${usagePointId}`;\n  const options = {\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n  };\n  /* data is in the form of (there's always the extra customer: [ { <data shown below> } ])\n    {\n      \"customer_id\": \"1358019319\",\n      \"usage_points\": [\n        {\n          \"usage_point\": {\n            \"usage_point_id\": \"12345678901234\",\n            \"usage_point_status\": \"com\",\n            \"meter_type\": \"AMM\",\n            \"contracts\": {\n              \"segment\": \"C5\",\n              \"subscribed_power\": \"9\",\n              \"last_activation_date\": \"2013-08-14+01:00\",\n              \"distribution_tariff\": \"BTINFCUST\",\n              \"last_distribution_tariff_change_date\": \"2017-12-25+01:00\",\n              \"offpeak_hours\": \"23h-7h\",\n              \"contract_type\": \"CARD-S\",\n              \"contract_status\": \"SERVC\"\n            }\n          }\n        }\n      ]\n    }\n  */\n\n  return axios.get(url, options).then(res => res.data[0].customer);\n};\n\n/**\n * get user's address from enedis\n *\n * @param {string} accessToken\n * @param {number} usagePointId\n */\nexport const getUserAddressesFromEnedis = (accessToken, usagePointId) => {\n  const url = `https://gw.hml.api.enedis.fr/v3/customers/usage_points/addresses?usage_point_id=${usagePointId}`;\n  const options = {\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n  };\n  /* \n  {\n  \"customer_id\": \"1358019319\",\n  \"usage_points\": [\n    {\n      \"usage_point\": {\n        \"usage_point_id\": \"12345678901234\",\n        \"usage_point_status\": \"com\",\n        \"usage_point_address\": {\n          \"street\": \"2 bis rue du capitaine Flam\",\n          \"locality\": \"lieudit Tourtouze\",\n          \"postal_code\": \"32400\",\n          \"insee_code\": \"32244\",\n          \"city\": \"MaulichÃ¨res\",\n          \"country\": \"France\",\n          \"geo_points\": {\n            \"latitude\": \"43.687253\",\n            \"longitude\": \"-0.087957\",\n            \"altitude\": \"148\"\n          }\n        }\n      }\n    }\n  ]\n  }\n  */\n\n  return axios.get(url, options).then(res => res.data[0].customer);\n};\n\n/**\n * format address into human readable form\n *\n * @param {object} address\n */\nconst formatAddress = address => {\n  const { street, postal_code, city, country } = address;\n  return `${street} \\n ${city} ${postal_code} \\n ${country}`;\n};\n\n/**\n * get all user's data from enedis and format them for the frontend\n *\n * @param {object} req\n * @param {object} res\n */\nexport const getMyData = (req, res) => {\n  const user = req.user; // {id, usagePointId }\n  return getUserAccessToken(user.id)\n    .then(accessToken => {\n      const contactData = getUserContactDataFromEnedis(accessToken, user.usagePointId);\n      const identity = getUserFromEnedis(accessToken, user.usagePointId);\n      const contracts = getUserContractsFromEnedis(accessToken, user.usagePointId);\n      const addresses = getUserAddressesFromEnedis(accessToken, user.usagePointId);\n      return Promise.all([contactData, identity, contracts, addresses]);\n    })\n    .then(data => {\n      if (data.length == 4) {\n        // TODO verify data structure\n        const customer = {\n          firstname: data[1].identity.natural_person.firstname,\n          lastname: data[1].identity.natural_person.lastname,\n          phone: data[0].contact_data.phone,\n          email: data[0].contact_data.email,\n          contracts: data[2].usage_points,\n          addresses: data[3].usage_points.map(up =>\n            formatAddress(up.usage_point.usage_point_addresses),\n          ),\n        };\n        console.log(customer);\n        res.send(customer);\n      } else {\n        throw new Error('Incorrect data received');\n      }\n    })\n    .catch(err => console.log(err));\n};\n\nexport const deleteMyData = (req, res) => {\n  const userId = req.user.id;\n  deleteDataForUser;\n};\n"]}