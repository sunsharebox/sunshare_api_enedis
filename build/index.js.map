{"version":3,"sources":["../src/index.js"],"names":["process","env","dotenv","config","app","use","Memorystore","session","genid","req","console","log","sessionID","Math","random","toString","substring","secret","SESSION_SECRET","store","checkPeriod","resave","saveUninitialized","err","res","next","name","status","send","login","state","query","testClientId","save","redirectUrl","CLIENT_ID","DURATION","REDIRECT_URI","redirect","sendStatus","httpStatus","FORBIDDEN","usagePointId","usage_point_id","postData","querystring","stringify","code","client_id","client_secret","CLIENT_SECRET","grant_type","url","options","method","headers","axios","post","then","r","data","Error","expiresAt","Date","parseInt","expires_in","issued_at","access_token","client","identity","natural_person","firstname","lastname","customer_id","refresh_token","spread","user","created","accessToken","refreshToken","jwt","sign","id","JWT_SECRET","catch","get","getMyData","deleteMyData","getConsumptionLoadCurve","getConsumptionMaxPower","getDailyConsumption","getDailyProduction","listen","PORT"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\nimport session from 'express-session';\nimport https from 'https';\nimport httpStatus from 'http-status';\nimport querystring from 'querystring';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport jwtMiddleWare from 'express-jwt';\nimport memorystore from 'memorystore';\nimport cors from 'cors';\n\nimport { findOrCreateUser, updateUser } from '../db/user';\n\nimport {\n  getConsumptionLoadCurve,\n  getConsumptionMaxPower,\n  getDailyConsumption,\n  getDailyProduction,\n  refreshData,\n  deleteMyData,\n} from './data';\n\nimport { getUserFromEnedis, getMyData } from './user';\n\n// Heroku gères les variables d'environement donc le '.env' est utilisé que pour le processus de développement\nif (process.env !== 'PRODUCTION') dotenv.config();\n\n// Create express application\nconst app = express();\n\n// CORS\napp.use(cors());\n\n// create memorystore\nconst Memorystore = memorystore(session);\n// create seesion & uses the session to store state\napp.use(\n  session({\n    genid: (req) => {\n      console.log('Inside session middleware');\n      console.log(req.sessionID);\n      return (Math.random() + 1).toString(36).substring(7);\n      // return genuuid() // use UUIDs for session IDs\n    },\n    secret: process.env.SESSION_SECRET,\n    store: new Memorystore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    resave: true,\n    saveUninitialized: true\n  }),\n);\n\n// Catch errors\napp.use((err, req, res, next) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).send('invalid token...');\n  }\n});\n\n// // When a user wishes to connect\nconst login = (req, res) => {\n  req.session.state = (Math.random() + 1).toString(36).substring(7);\n\n  // Add test client number (from 0 to 4) to the end of state (cf documentation)\n  if (req.query.testClientId) {\n    req.session.state = req.session.state + req.query.testClientId;\n  } else {\n    // if no specific client is specified, default to client 0\n    req.session.state = req.session.state + '0';\n  }\n  req.session.save();\n\n  console.log(req.sessionID);\n  // Redirect user to login page on enedis\n  const redirectUrl =\n    'https://gw.hml.api.enedis.fr/group/espace-particuliers/consentement-linky/oauth2/authorize' +\n    '?' +\n    `client_id=${process.env.CLIENT_ID}` +\n    `&state=${req.session.state}` +\n    `&duration=${process.env.DURATION}` + // duration est la durée du consentement que vous souhaitez obtenir : cette durée est à renseigner au format ISO 8601 (exemple : « P6M » pour une durée de 6 mois),\n    '&response_type=code' +\n    `&redirect_uri=${process.env.REDIRECT_URI}`;\n  console.log('Redirect URL : ' + redirectUrl);\n  return res.redirect(redirectUrl);\n};\n\n// // This function catches the redirection of enedis after login\nconst redirect = (req, res) => {\n  // verify that the state is correct\n  if (req.session.state !== req.query.state) {\n    return res.sendStatus(httpStatus.FORBIDDEN);\n  }\n\n  const usagePointId = req.query.usage_point_id;\n  const postData = querystring.stringify({\n    code: req.query.code,\n    client_id: process.env.CLIENT_ID,\n    client_secret: process.env.CLIENT_SECRET,\n    grant_type: 'authorization_code',\n  });\n\n  const url = `https://gw.hml.api.enedis.fr/v1/oauth2/token?redirect_uri=${\n    process.env.REDIRECT_URI\n  }`;\n\n  const options = {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n  };\n  axios\n    .post(url, postData, options)\n    .then(r => {\n      if (r.status === 200) return r.data;\n      throw new Error(r.status);\n    })\n    .then(data => {\n      const expiresAt = new Date(\n        parseInt(data.expires_in, 10) * 1000 + parseInt(data.issued_at, 10),\n      );\n\n      // get user information from enedis to create user\n      getUserFromEnedis(data.access_token, usagePointId).then(client => {\n        return findOrCreateUser(\n          client.identity.natural_person.firstname,\n          client.identity.natural_person.lastname,\n          client.customer_id,\n          data.access_token,\n          data.refresh_token,\n          usagePointId,\n          expiresAt,\n        ).spread((user, created) => {\n          updateUser(user, {\n            accessToken: data.access_token,\n            refreshToken: data.refresh_token,\n            usagePointId,\n            expiresAt,\n          });\n          // redirect for the app to catch this route\n          return res.redirect(\n            `enedis-third-party-app://auth_complete?user=${jwt.sign(\n              { id: user.id, usagePointId: user.usagePointId },\n              process.env.JWT_SECRET,\n            )}`,\n          );\n        });\n      });\n    })\n    .catch(err => console.log(err));\n};\n\n// Routes\napp.get('/', (req, res) => res.send('ENEDIS API'));\napp.get('/login', login);\napp.get('/redirect', redirect);\napp.get('/me', jwtMiddleWare({ secret: process.env.JWT_SECRET }), getMyData);\napp.get('/deleteme', jwtMiddleWare({ secret: process.env.JWT_SECRET }), deleteMyData);\napp.get(\n  '/metering/consumption_load_curve',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  getConsumptionLoadCurve,\n);\n\napp.get(\n  '/metering/consumption_max_power',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  getConsumptionMaxPower,\n);\n\napp.get(\n  '/metering/daily_consumption',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  getDailyConsumption,\n);\n\napp.get(\n  '/metering/daily_production',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  getDailyProduction,\n);\n\napp.get(\n  '/metering/refresh/consumption_load_curve',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  (req, res) => {\n    refreshData(req, res, 'consumption_load_curve');\n  },\n);\napp.get(\n  '/metering/refresh/consumption_max_power',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  (req, res) => {\n    refreshData(req, res, 'consumption_max_power');\n  },\n);\napp.get(\n  '/metering/refresh/daily_consumption',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  (req, res) => {\n    refreshData(req, res, 'daily_consumption');\n  },\n);\napp.get(\n  '/metering/refresh/daily_production',\n  jwtMiddleWare({ secret: process.env.JWT_SECRET }),\n  (req, res) => {\n    refreshData(req, res, 'daily_production');\n  },\n);\n\n// Listen to port specified by the .env or 3001\napp.listen(process.env.PORT || 3001, () => console.log('ENEDIS API'));\n"]}