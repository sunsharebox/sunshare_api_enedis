{"version":3,"sources":["../src/data.js"],"names":["jwtSecret","process","env","JWT_SECRET","formatDataFromEnedis","graphData","data","usage_point","map","meter_reading","start","end","reading_type","usage_point_id","d","metadata","unit","usagePointId","graph_data","interval_reading","timestamp","Date","setSeconds","getSeconds","interval_length","point","rank","value","createDateStrings","setDate","getDate","toISOString","getDataFromEnedis","URLType","req","res","url","user","console","log","id","then","options","method","headers","Accept","Authorization","accessToken","ACCESS_TOKEN","axios","get","r","status","forEach","_","camelCase","send","catch","err","response","message","formatDataFromDB","tmp","e","push","Object","keys","length","getConsumptionLoadCurve","getConsumptionMaxPower","getDailyConsumption","getDailyProduction","refreshData","dataType","deleteMyData"],"mappings":"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","file":"data.js","sourcesContent":["import axios from 'axios';\nimport httpStatus from 'http-status';\nimport querystring from 'querystring';\nimport { getUserByEnedisId } from '../db/user';\nimport { getDataForUserByType, createDataForUser, deleteDataForUser } from '../db/data';\nimport { getUserAccessToken } from './user';\nimport _ from 'lodash';\n\nconst jwtSecret = process.env.JWT_SECRET;\n\n// gives\n// [ {metadata, graph_data}, ... ]\n\n/**\n * format elecricity data from enedis to store in database\n *\n * @param {object} data\n */\nconst formatDataFromEnedis = data => {\n  const graphData = data.usage_point.map(({ meter_reading }) => {\n    const { start, end, reading_type, usage_point_id } = meter_reading;\n    const d = {};\n\n    d.metadata = {\n      start,\n      end,\n      unit: reading_type.unit,\n      usagePointId: usage_point_id,\n    };\n\n    d.graph_data = meter_reading.interval_reading.map(point => {\n      const timestamp = new Date(start);\n      timestamp.setSeconds(\n        timestamp.getSeconds() + reading_type.interval_length * (point.rank - 1),\n      );\n      return { timestamp, value: point.value };\n    });\n\n    return d;\n  });\n\n  return graphData;\n};\n\n/**\n * create strings from date that are 10 days apart\n */\nconst createDateStrings = () => {\n  const start = new Date();\n  start.setDate(start.getDate() - 10);\n  return { end: new Date().toISOString(), start: start.toISOString() };\n};\n\n/**\n *\n * @param {string} URLType can be consumption_load_curve, consumption_max_power, daily_consumption, daily_production\n * @param {obj} req\n * @param {obj} res\n */\nconst getDataFromEnedis = (URLType, req, res) => {\n  const url =\n    `https://gw.hml.api.enedis.fr/v3/metering_data/${URLType}` +\n    '?' +\n    `start=${createDateStrings().start}` +\n    `&end=${createDateStrings().end}` +\n    `&usage_point_id=${req.user.usagePointId}`;\n\n  console.log(url);\n  getUserAccessToken(req.user.id)\n    .then(accessToken => {\n      const options = {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          Authorization: `Bearer ${accessToken || process.env.ACCESS_TOKEN}`,\n        },\n      };\n\n      return axios.get(url, options);\n    })\n    .then(r => {\n      if (r.status === 200) return r.data;\n    })\n    .then(data => {\n      const graphData = formatDataFromEnedis(data); // [ {metadata, graph_data}, ... ]\n      // Save data to database\n      graphData.forEach(d => {\n        createDataForUser(\n          req.user.id,\n          d.graph_data,\n          d.metadata.unit,\n          _.camelCase(URLType),\n          d.metadata.usagePointId,\n        );\n      });\n      res.send(graphData);\n    })\n    .catch(err => {\n      if (err.response && err.response.status === 403)\n        return res.send({ message: 'Le client est inconnu ou non habilité' });\n      console.log(err);\n      res.send(\"Un erreur s'est produit\");\n    });\n};\n\n/**\n * format the data from database to be used by the front end\n *\n * @param {[]object} data {timestamp, value, type, unit, usagePointId}\n */\nconst formatDataFromDB = data => {\n  // { usagePointId: [],  ... }\n  const tmp = {};\n  data.forEach(e => {\n    tmp[e.usagePointId] = tmp[e.usagePointId] || [];\n    tmp[e.usagePointId].push({\n      timestamp: e.timestamp,\n      value: e.value,\n    });\n  });\n  // [{metadata: , data: [] }, ... ]\n  const graph_data = Object.keys(tmp).map(id => ({\n    metadata: {\n      start: data[0].timestamp,\n      end: data[data.length - 1].timestamp,\n      unit: data[0].unit,\n      usagePointId: id,\n    },\n    graph_data: tmp[id],\n  }));\n  return graph_data;\n};\n\n/**\n * get consumption load curve data\n *\n * @param {*} req\n * @param {*} res\n */\nexport const getConsumptionLoadCurve = (req, res) => {\n  // Is data in bdd\n  getDataForUserByType(req.user.id, 'consumptionLoadCurve').then(data => {\n    if (data.length === 0) {\n      // Data is not in bdd\n      getDataFromEnedis('consumption_load_curve', req, res);\n    } else {\n      res.send(formatDataFromDB(data));\n    }\n  });\n};\n\n/**\n * get consumption max power data\n *\n * @param {*} req\n * @param {*} res\n */\nexport const getConsumptionMaxPower = (req, res) => {\n  // Is data in bdd\n  getDataForUserByType(req.user.id, 'consumptionMaxPower').then(data => {\n    if (data.length === 0) {\n      // Data is not in bdd\n      getDataFromEnedis('consumption_max_power', req, res);\n    } else {\n      res.send(formatDataFromDB(data));\n    }\n  });\n};\n\n/**\n * get daily consumption data\n *\n * @param {*} req\n * @param {*} res\n */\nexport const getDailyConsumption = (req, res) => {\n  // Is data in bdd\n  getDataForUserByType(req.user.id, 'dailyConsumption').then(data => {\n    if (data.length === 0) {\n      // Data is not in bdd\n      getDataFromEnedis('daily_consumption', req, res);\n    } else {\n      res.send(formatDataFromDB(data));\n    }\n  });\n};\n\n/**\n * get daily production data\n *\n * @param {*} req\n * @param {*} res\n */\nexport const getDailyProduction = (req, res) => {\n  // Is data in bdd\n  getDataForUserByType(req.user.id, 'dailyProduction').then(data => {\n    if (data.length === 0) {\n      // Data is not in bdd\n      getDataFromEnedis('daily_production', req, res);\n    } else {\n      res.send(formatDataFromDB(data));\n    }\n  });\n};\n\n// datatype needs to be in snake_case\nexport const refreshData = (req, res, dataType) => {\n  getDataFromEnedis(dataType, req, res);\n};\n\nexport const deleteMyData = (req, res) => {\n  return deleteDataForUser(req.user.id)\n    .then(affectedRows => {\n      res.send('ok');\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n"]}